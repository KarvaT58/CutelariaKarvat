{
  "components": {
    "ItemCard.tsx": {
      "path": "components/ItemCard.tsx",
      "content": "'use client';\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { MessageCircle } from 'lucide-react';\nimport { Item } from '@/types/database';\nimport { formatBRL } from '@/lib/formatters';\n\nexport function ItemCard({ item, waLink }: { item: Item & { image_url: string }; waLink: (title: string) => string }) {\n  return (\n    <Card className=\"overflow-hidden rounded-2xl hover:shadow-lg transition-shadow\">\n      <div className=\"relative w-full aspect-[16/9]\">\n        <Image\n          src={item.image_url}\n          alt={item.title}\n          fill\n          className=\"object-cover\"\n          sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw\"\n        />\n      </div>\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-base sm:text-lg line-clamp-1\">{item.title}</CardTitle>\n      </CardHeader>\n      <CardContent className=\"flex flex-col gap-3\">\n        <p className=\"text-sm text-muted-foreground line-clamp-3\">{item.description}</p>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"font-semibold text-lg\">{formatBRL(item.price_cents)}</span>\n          <Button asChild className=\"gap-2\" size=\"sm\">\n            <a href={waLink(item.title)} target=\"_blank\" rel=\"noopener noreferrer\" aria-label=\"Conversar no WhatsApp\">\n              <MessageCircle className=\"size-4\" />\n              WhatsApp\n            </a>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}"
    },
    "carrossel-page.tsx": {
      "path": "app/carrossel/page.tsx",
      "content": "import { supabaseServer } from '@/lib/supabase';\nimport { ItemCard } from '@/components/ItemCard';\nimport { buildWhatsAppLink } from '@/lib/whatsapp';\n\nexport default async function CarrosselPage() {\n  const supabase = supabaseServer();\n\n  const { data: settings } = await supabase\n    .from('settings')\n    .select('*')\n    .limit(1)\n    .single();\n\n  const { data: items } = await supabase\n    .from('items')\n    .select('id,title,description,price_cents,image_path,position')\n    .eq('published', true)\n    .order('position', { ascending: true });\n\n  const urlFor = (path: string) =>\n    supabase.storage.from('items').getPublicUrl(path).data.publicUrl;\n\n  const waLink = buildWhatsAppLink(\n    settings?.whatsapp_number || '',\n    settings?.whatsapp_message || 'Olá! Tenho interesse.'\n  );\n\n  return (\n    <main className=\"mx-auto max-w-7xl px-3 sm:px-6 py-6 sm:py-10\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl sm:text-4xl font-bold mb-4\">Facas Artesanais</h1>\n        <p className=\"text-muted-foreground text-lg\">Qualidade artesanal, feitas à mão com precisão</p>\n      </div>\n\n      <section className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\">\n        {(items || []).map((item) => (\n          <ItemCard\n            key={item.id}\n            item={{ ...item, image_url: urlFor(item.image_path) }}\n            waLink={waLink}\n          />\n        ))}\n      </section>\n\n      {(!items || items.length === 0) && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">Nenhum item disponível no momento.</p>\n        </div>\n      )}\n    </main>\n  );\n}"
    },
    "admin-page.tsx": {
      "path": "app/admin/page.tsx",
      "content": "'use client';\nimport { useEffect, useState } from 'react';\nimport { createClientComponentClient } from '@supabase/auth-helpers-nextjs';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Edit, Trash2, Eye, EyeOff } from 'lucide-react';\nimport { Item, Settings } from '@/types/database';\nimport { formatBRL } from '@/lib/formatters';\nimport { toast } from 'sonner';\n\nexport default function AdminPage() {\n  const supabase = createClientComponentClient();\n  const [items, setItems] = useState<(Item & { image_url: string })[]>([]);\n  const [settings, setSettings] = useState<Settings | null>(null);\n  const [open, setOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<Item | null>(null);\n  const [form, setForm] = useState({\n    title: '',\n    description: '',\n    price_cents: '',\n    position: 0,\n    published: true,\n    file: null as File | null\n  });\n  const [loading, setLoading] = useState(false);\n\n  async function fetchAll() {\n    const { data: itemsData } = await supabase\n      .from('items')\n      .select('*')\n      .order('position');\n    \n    const { data: settingsData } = await supabase\n      .from('settings')\n      .select('*')\n      .limit(1)\n      .single();\n\n    if (itemsData) {\n      const itemsWithUrls = itemsData.map(item => ({\n        ...item,\n        image_url: supabase.storage.from('items').getPublicUrl(item.image_path).data.publicUrl\n      }));\n      setItems(itemsWithUrls);\n    }\n    \n    setSettings(settingsData);\n  }\n\n  useEffect(() => {\n    fetchAll();\n  }, []);\n\n  async function saveItem() {\n    if (!form.title || !form.description || !form.price_cents) {\n      toast.error('Preencha todos os campos obrigatórios');\n      return;\n    }\n\n    setLoading(true);\n    let image_path = editingItem?.image_path || '';\n\n    if (form.file) {\n      const path = `items/${crypto.randomUUID()}-${form.file.name}`;\n      const { error: uploadError } = await supabase.storage\n        .from('items')\n        .upload(path, form.file, { cacheControl: '3600', upsert: false });\n      \n      if (uploadError) {\n        toast.error('Erro no upload da imagem');\n        setLoading(false);\n        return;\n      }\n      image_path = path;\n    }\n\n    const payload = {\n      title: form.title,\n      description: form.description,\n      price_cents: parseInt(form.price_cents, 10),\n      image_path,\n      published: form.published,\n      position: form.position\n    };\n\n    const { error } = editingItem\n      ? await supabase.from('items').update(payload).eq('id', editingItem.id)\n      : await supabase.from('items').insert(payload);\n\n    if (error) {\n      toast.error('Erro ao salvar item');\n    } else {\n      toast.success(editingItem ? 'Item atualizado!' : 'Item criado!');\n      setOpen(false);\n      setEditingItem(null);\n      setForm({ title: '', description: '', price_cents: '', position: 0, published: true, file: null });\n      fetchAll();\n    }\n    setLoading(false);\n  }\n\n  async function deleteItem(id: string) {\n    if (!confirm('Tem certeza que deseja excluir este item?')) return;\n    \n    const { error } = await supabase.from('items').delete().eq('id', id);\n    if (error) {\n      toast.error('Erro ao excluir item');\n    } else {\n      toast.success('Item excluído!');\n      fetchAll();\n    }\n  }\n\n  async function togglePublished(id: string, currentStatus: boolean) {\n    const { error } = await supabase\n      .from('items')\n      .update({ published: !currentStatus })\n      .eq('id', id);\n    \n    if (error) {\n      toast.error('Erro ao alterar status');\n    } else {\n      toast.success(`Item ${!currentStatus ? 'publicado' : 'despublicado'}!`);\n      fetchAll();\n    }\n  }\n\n  async function saveSettings() {\n    if (!settings) return;\n    \n    const { error } = await supabase.from('settings').upsert({\n      id: settings.id,\n      whatsapp_number: settings.whatsapp_number,\n      whatsapp_message: settings.whatsapp_message\n    });\n    \n    if (error) {\n      toast.error('Erro ao salvar configurações');\n    } else {\n      toast.success('Configurações salvas!');\n      fetchAll();\n    }\n  }\n\n  function openEditDialog(item: Item) {\n    setEditingItem(item);\n    setForm({\n      title: item.title,\n      description: item.description,\n      price_cents: item.price_cents.toString(),\n      position: item.position,\n      published: item.published,\n      file: null\n    });\n    setOpen(true);\n  }\n\n  return (\n    <main className=\"mx-auto max-w-6xl px-3 sm:px-6 py-6 sm:py-10\">\n      <div className=\"flex items-center justify-between mb-8\">\n        <h1 className=\"text-3xl font-bold\">Administração</h1>\n        <Dialog open={open} onOpenChange={setOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => { setEditingItem(null); setForm({ title: '', description: '', price_cents: '', position: 0, published: true, file: null }); }}>\n              Novo Item\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingItem ? 'Editar Item' : 'Novo Item'}</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid gap-4\">\n              <Input\n                placeholder=\"Título\"\n                value={form.title}\n                onChange={e => setForm({ ...form, title: e.target.value })}\n              />\n              <Textarea\n                placeholder=\"Descrição\"\n                value={form.description}\n                onChange={e => setForm({ ...form, description: e.target.value })}\n                rows={3}\n              />\n              <Input\n                type=\"number\"\n                placeholder=\"Preço em centavos (ex: 5000 = R$ 50,00)\"\n                value={form.price_cents}\n                onChange={e => setForm({ ...form, price_cents: e.target.value })}\n              />\n              <Input\n                type=\"number\"\n                placeholder=\"Posição (ordem)\"\n                value={form.position}\n                onChange={e => setForm({ ...form, position: parseInt(e.target.value) || 0 })}\n              />\n              <Input\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={e => setForm({ ...form, file: e.target.files?.[0] || null })}\n              />\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"checkbox\"\n                  id=\"published\"\n                  checked={form.published}\n                  onChange={e => setForm({ ...form, published: e.target.checked })}\n                />\n                <label htmlFor=\"published\">Publicado</label>\n              </div>\n              <Button onClick={saveItem} disabled={loading}>\n                {loading ? 'Salvando...' : 'Salvar'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <section className=\"mb-10\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Configurações WhatsApp</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Input\n              placeholder=\"Número (+5541999999999)\"\n              value={settings?.whatsapp_number || ''}\n              onChange={e => setSettings({ ...settings!, whatsapp_number: e.target.value })}\n            />\n            <Textarea\n              placeholder=\"Mensagem padrão\"\n              value={settings?.whatsapp_message || ''}\n              onChange={e => setSettings({ ...settings!, whatsapp_message: e.target.value })}\n              rows={2}\n            />\n            <Button onClick={saveSettings}>Salvar Configurações</Button>\n          </CardContent>\n        </Card>\n      </section>\n\n      <section>\n        <h2 className=\"text-2xl font-semibold mb-4\">Itens ({items.length})</h2>\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {items.map(item => (\n            <Card key={item.id} className=\"overflow-hidden\">\n              <div className=\"relative w-full aspect-[16/9]\">\n                <img\n                  src={item.image_url}\n                  alt={item.title}\n                  className=\"w-full h-full object-cover\"\n                />\n                <Badge className={`absolute top-2 right-2 ${item.published ? 'bg-green-500' : 'bg-gray-500'}`}>\n                  {item.published ? 'Publicado' : 'Rascunho'}\n                </Badge>\n              </div>\n              <CardContent className=\"p-4\">\n                <h3 className=\"font-semibold line-clamp-1\">{item.title}</h3>\n                <p className=\"text-sm text-muted-foreground line-clamp-2\">{item.description}</p>\n                <p className=\"font-semibold mt-2\">{formatBRL(item.price_cents)}</p>\n                <div className=\"flex gap-2 mt-3\">\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => openEditDialog(item)}>\n                    <Edit className=\"size-4\" />\n                  </Button>\n                  <Button size=\"sm\" variant=\"outline\" onClick={() => togglePublished(item.id, item.published)}>\n                    {item.published ? <EyeOff className=\"size-4\" /> : <Eye className=\"size-4\" />}\n                  </Button>\n                  <Button size=\"sm\" variant=\"destructive\" onClick={() => deleteItem(item.id)}>\n                    <Trash2 className=\"size-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n    </main>\n  );\n}"
    }
  }
}
